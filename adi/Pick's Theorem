#include<bits/stdc++.h> 
using namespace std; 
 
struct Point {
	long long x, y;
};
 
long long gcd(long long a, long long b) { 
	if (b == 0)
		return a;
	return gcd(b, a%b); 
} 
 
long long getBoundaryCount(Point p,Point q) {
	if (p.x==q.x) return abs(p.y-q.y) - 1; 
	if (p.y == q.y) return abs(p.x-q.x) - 1; 
	return gcd(abs(p.x-q.x),abs(p.y-q.y))-1;
}
 
long long getinternalCount(Point p[],long long n) {
	long long BoundaryPoints=n,area=0;
	for(long long i=1;i<n;i++)
		BoundaryPoints+=getBoundaryCount(p[i], p[i-1]);
	BoundaryPoints+=getBoundaryCount(p[0],p[n-1]);
	for(long long i=1;i<n;i++)
		area+=(p[i-1].x+p[i].x)*(p[i-1].y-p[i].y);
	area+=(p[n-1].x+p[0].x)*(p[n-1].y-p[0].y);
	return (abs(area) - BoundaryPoints + 2)/2;
}
 
/* Pick's Theorem: S=I+B/2-1 
S: Area, B: Boundary points, I: Internal points */

int main() {
	long long n;
	cin >> n;
	Point p[n];
	for (long long i = 0; i < n; ++i)
		cin >> p[i].x >> p[i].y;
	cout << getinternalCount(p,n) << endl ;
}
